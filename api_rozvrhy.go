
/*
 * IS/STAG Web Services API
 *
 * Automaticky generovaná OpenAPI specifikace z WADL souborů pro webové služby IS/STAG.
 *
 * API version: 2.0.0
 * Contact: podpora@service.zcu.cz
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type RozvrhyApiService service
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetpozadavkynacasvyuky&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetpozadavkynacasvyukyOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "UcitIdno" (optional.Int64) - 
     * @param "Katedra" (optional.String) - 
     * @param "Fakulta" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetpozadavkynacasvyukyOpts struct {
    StagUser optional.String
    Rok optional.String
    Semestr optional.String
    UcitIdno optional.Int64
    Katedra optional.String
    Fakulta optional.String
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetpozadavkynacasvyuky(ctx context.Context, localVarOptionals *RozvrhyApiGetGetpozadavkynacasvyukyOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getPozadavkyNaCasVyuky"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UcitIdno.IsSet() {
		localVarQueryParams.Add("ucitIdno", parameterToString(localVarOptionals.UcitIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fakulta.IsSet() {
		localVarQueryParams.Add("fakulta", parameterToString(localVarOptionals.Fakulta.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbykatedra&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbykatedraOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhbykatedraOpts struct {
    StagUser optional.String
    Katedra optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbykatedra(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbykatedraOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByKatedra"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbykatedraical&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbykatedraicalOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbykatedraicalOpts struct {
    StagUser optional.String
    Katedra optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbykatedraical(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbykatedraicalOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByKatedraICAL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/calendar"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbykatedrapdf&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbykatedrapdfOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "GrafickyRozvrh" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbykatedrapdfOpts struct {
    StagUser optional.String
    Katedra optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    GrafickyRozvrh optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbykatedrapdf(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbykatedrapdfOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByKatedraPDF"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrafickyRozvrh.IsSet() {
		localVarQueryParams.Add("grafickyRozvrh", parameterToString(localVarOptionals.GrafickyRozvrh.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbykrouzek&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbykrouzekOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Kod" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhbykrouzekOpts struct {
    StagUser optional.String
    Kod optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbykrouzek(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbykrouzekOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByKrouzek"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Kod.IsSet() {
		localVarQueryParams.Add("kod", parameterToString(localVarOptionals.Kod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbykrouzekical&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbykrouzekicalOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Kod" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbykrouzekicalOpts struct {
    StagUser optional.String
    Kod optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbykrouzekical(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbykrouzekicalOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByKrouzekICAL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Kod.IsSet() {
		localVarQueryParams.Add("kod", parameterToString(localVarOptionals.Kod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/calendar"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbykrouzekpdf&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbykrouzekpdfOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Kod" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "GrafickyRozvrh" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbykrouzekpdfOpts struct {
    StagUser optional.String
    Kod optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    GrafickyRozvrh optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbykrouzekpdf(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbykrouzekpdfOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByKrouzekPDF"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Kod.IsSet() {
		localVarQueryParams.Add("kod", parameterToString(localVarOptionals.Kod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrafickyRozvrh.IsSet() {
		localVarQueryParams.Add("grafickyRozvrh", parameterToString(localVarOptionals.GrafickyRozvrh.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbymistnost&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbymistnostOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Budova" (optional.String) - 
     * @param "Mistnost" (optional.String) - 
     * @param "IdentifikatorMistnosti" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhbymistnostOpts struct {
    StagUser optional.String
    Budova optional.String
    Mistnost optional.String
    IdentifikatorMistnosti optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbymistnost(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbymistnostOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByMistnost"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Budova.IsSet() {
		localVarQueryParams.Add("budova", parameterToString(localVarOptionals.Budova.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mistnost.IsSet() {
		localVarQueryParams.Add("mistnost", parameterToString(localVarOptionals.Mistnost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdentifikatorMistnosti.IsSet() {
		localVarQueryParams.Add("identifikatorMistnosti", parameterToString(localVarOptionals.IdentifikatorMistnosti.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbymistnostacas&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbymistnostacasOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Budova" (optional.String) - 
     * @param "Mistnost" (optional.String) - 
     * @param "Timestamp" (optional.Int64) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhbymistnostacasOpts struct {
    StagUser optional.String
    Budova optional.String
    Mistnost optional.String
    Timestamp optional.Int64
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbymistnostacas(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbymistnostacasOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByMistnostACas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Budova.IsSet() {
		localVarQueryParams.Add("budova", parameterToString(localVarOptionals.Budova.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mistnost.IsSet() {
		localVarQueryParams.Add("mistnost", parameterToString(localVarOptionals.Mistnost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timestamp.IsSet() {
		localVarQueryParams.Add("timestamp", parameterToString(localVarOptionals.Timestamp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbymistnostical&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbymistnosticalOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Budova" (optional.String) - 
     * @param "Mistnost" (optional.String) - 
     * @param "IdentifikatorMistnosti" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbymistnosticalOpts struct {
    StagUser optional.String
    Budova optional.String
    Mistnost optional.String
    IdentifikatorMistnosti optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbymistnostical(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbymistnosticalOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByMistnostICAL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Budova.IsSet() {
		localVarQueryParams.Add("budova", parameterToString(localVarOptionals.Budova.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mistnost.IsSet() {
		localVarQueryParams.Add("mistnost", parameterToString(localVarOptionals.Mistnost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdentifikatorMistnosti.IsSet() {
		localVarQueryParams.Add("identifikatorMistnosti", parameterToString(localVarOptionals.IdentifikatorMistnosti.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/calendar"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbymistnostpdf&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbymistnostpdfOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Budova" (optional.String) - 
     * @param "Mistnost" (optional.String) - 
     * @param "IdentifikatorMistnosti" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "GrafickyRozvrh" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbymistnostpdfOpts struct {
    StagUser optional.String
    Budova optional.String
    Mistnost optional.String
    IdentifikatorMistnosti optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    GrafickyRozvrh optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbymistnostpdf(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbymistnostpdfOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByMistnostPDF"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Budova.IsSet() {
		localVarQueryParams.Add("budova", parameterToString(localVarOptionals.Budova.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mistnost.IsSet() {
		localVarQueryParams.Add("mistnost", parameterToString(localVarOptionals.Mistnost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdentifikatorMistnosti.IsSet() {
		localVarQueryParams.Add("identifikatorMistnosti", parameterToString(localVarOptionals.IdentifikatorMistnosti.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrafickyRozvrh.IsSet() {
		localVarQueryParams.Add("grafickyRozvrh", parameterToString(localVarOptionals.GrafickyRozvrh.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbyplan&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbyplanOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "StplIdno" (optional.Int64) - 
     * @param "Rocnik" (optional.Int32) - 
     * @param "Statuty" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "ZkrBudovy" (optional.String) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhbyplanOpts struct {
    StagUser optional.String
    StplIdno optional.Int64
    Rocnik optional.Int32
    Statuty optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    ZkrBudovy optional.String
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbyplan(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbyplanOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByPlan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StplIdno.IsSet() {
		localVarQueryParams.Add("stplIdno", parameterToString(localVarOptionals.StplIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rocnik.IsSet() {
		localVarQueryParams.Add("rocnik", parameterToString(localVarOptionals.Rocnik.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Statuty.IsSet() {
		localVarQueryParams.Add("statuty", parameterToString(localVarOptionals.Statuty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ZkrBudovy.IsSet() {
		localVarQueryParams.Add("zkrBudovy", parameterToString(localVarOptionals.ZkrBudovy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbyplanical&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbyplanicalOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "StplIdno" (optional.Int64) - 
     * @param "Rocnik" (optional.Int32) - 
     * @param "Statuty" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "ZkrBudovy" (optional.String) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbyplanicalOpts struct {
    StagUser optional.String
    StplIdno optional.Int64
    Rocnik optional.Int32
    Statuty optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    ZkrBudovy optional.String
    VsechnyAkce optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbyplanical(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbyplanicalOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByPlanICAL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StplIdno.IsSet() {
		localVarQueryParams.Add("stplIdno", parameterToString(localVarOptionals.StplIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rocnik.IsSet() {
		localVarQueryParams.Add("rocnik", parameterToString(localVarOptionals.Rocnik.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Statuty.IsSet() {
		localVarQueryParams.Add("statuty", parameterToString(localVarOptionals.Statuty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ZkrBudovy.IsSet() {
		localVarQueryParams.Add("zkrBudovy", parameterToString(localVarOptionals.ZkrBudovy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/calendar"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbyplanpdf&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbyplanpdfOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "StplIdno" (optional.Int64) - 
     * @param "Rocnik" (optional.Int32) - 
     * @param "Statuty" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "ZkrBudovy" (optional.String) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "GrafickyRozvrh" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbyplanpdfOpts struct {
    StagUser optional.String
    StplIdno optional.Int64
    Rocnik optional.Int32
    Statuty optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    ZkrBudovy optional.String
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    GrafickyRozvrh optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbyplanpdf(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbyplanpdfOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByPlanPDF"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StplIdno.IsSet() {
		localVarQueryParams.Add("stplIdno", parameterToString(localVarOptionals.StplIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rocnik.IsSet() {
		localVarQueryParams.Add("rocnik", parameterToString(localVarOptionals.Rocnik.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Statuty.IsSet() {
		localVarQueryParams.Add("statuty", parameterToString(localVarOptionals.Statuty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ZkrBudovy.IsSet() {
		localVarQueryParams.Add("zkrBudovy", parameterToString(localVarOptionals.ZkrBudovy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrafickyRozvrh.IsSet() {
		localVarQueryParams.Add("grafickyRozvrh", parameterToString(localVarOptionals.GrafickyRozvrh.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbypredmet&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbypredmetOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhbypredmetOpts struct {
    StagUser optional.String
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbypredmet(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbypredmetOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByPredmet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbypredmetical&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbypredmeticalOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbypredmeticalOpts struct {
    StagUser optional.String
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbypredmetical(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbypredmeticalOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByPredmetICAL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/calendar"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbypredmetpdf&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbypredmetpdfOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "GrafickyRozvrh" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbypredmetpdfOpts struct {
    StagUser optional.String
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    GrafickyRozvrh optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbypredmetpdf(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbypredmetpdfOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByPredmetPDF"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrafickyRozvrh.IsSet() {
		localVarQueryParams.Add("grafickyRozvrh", parameterToString(localVarOptionals.GrafickyRozvrh.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbystudent&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbystudentOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "OsCislo" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhbystudentOpts struct {
    StagUser optional.String
    OsCislo optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbystudent(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbystudentOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByStudent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OsCislo.IsSet() {
		localVarQueryParams.Add("osCislo", parameterToString(localVarOptionals.OsCislo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbystudentical&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbystudenticalOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "OsCislo" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbystudenticalOpts struct {
    StagUser optional.String
    OsCislo optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbystudentical(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbystudenticalOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByStudentICAL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OsCislo.IsSet() {
		localVarQueryParams.Add("osCislo", parameterToString(localVarOptionals.OsCislo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/calendar"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbystudentpdf&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbystudentpdfOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "OsCislo" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "GrafickyRozvrh" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbystudentpdfOpts struct {
    StagUser optional.String
    OsCislo optional.String
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    GrafickyRozvrh optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbystudentpdf(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbystudentpdfOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByStudentPDF"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OsCislo.IsSet() {
		localVarQueryParams.Add("osCislo", parameterToString(localVarOptionals.OsCislo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrafickyRozvrh.IsSet() {
		localVarQueryParams.Add("grafickyRozvrh", parameterToString(localVarOptionals.GrafickyRozvrh.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbyucitel&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbyucitelOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "UcitIdno" (optional.Int64) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhbyucitelOpts struct {
    StagUser optional.String
    UcitIdno optional.Int64
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbyucitel(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbyucitelOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByUcitel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UcitIdno.IsSet() {
		localVarQueryParams.Add("ucitIdno", parameterToString(localVarOptionals.UcitIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbyucitelical&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbyucitelicalOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "UcitIdno" (optional.Int64) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbyucitelicalOpts struct {
    StagUser optional.String
    UcitIdno optional.Int64
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbyucitelical(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbyucitelicalOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByUcitelICAL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UcitIdno.IsSet() {
		localVarQueryParams.Add("ucitIdno", parameterToString(localVarOptionals.UcitIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/calendar"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhbyucitelpdf&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhbyucitelpdfOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "UcitIdno" (optional.Int64) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "DatumOd" (optional.Time) - 
     * @param "DatumDo" (optional.Time) - 
     * @param "VsechnyAkce" (optional.Bool) - 
     * @param "VsechnyCasyKonani" (optional.Bool) - 
     * @param "JenRozvrhoveAkce" (optional.Bool) - 
     * @param "JenBudouciAkce" (optional.Bool) - 
     * @param "GrafickyRozvrh" (optional.Bool) - 
     * @param "Lang" (optional.String) - 

*/

type RozvrhyApiGetGetrozvrhbyucitelpdfOpts struct {
    StagUser optional.String
    UcitIdno optional.Int64
    Rok optional.String
    Semestr optional.String
    DatumOd optional.Time
    DatumDo optional.Time
    VsechnyAkce optional.Bool
    VsechnyCasyKonani optional.Bool
    JenRozvrhoveAkce optional.Bool
    JenBudouciAkce optional.Bool
    GrafickyRozvrh optional.Bool
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhbyucitelpdf(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhbyucitelpdfOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhByUcitelPDF"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UcitIdno.IsSet() {
		localVarQueryParams.Add("ucitIdno", parameterToString(localVarOptionals.UcitIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumOd.IsSet() {
		localVarQueryParams.Add("datumOd", parameterToString(localVarOptionals.DatumOd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DatumDo.IsSet() {
		localVarQueryParams.Add("datumDo", parameterToString(localVarOptionals.DatumDo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyAkce.IsSet() {
		localVarQueryParams.Add("vsechnyAkce", parameterToString(localVarOptionals.VsechnyAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VsechnyCasyKonani.IsSet() {
		localVarQueryParams.Add("vsechnyCasyKonani", parameterToString(localVarOptionals.VsechnyCasyKonani.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenRozvrhoveAkce.IsSet() {
		localVarQueryParams.Add("jenRozvrhoveAkce", parameterToString(localVarOptionals.JenRozvrhoveAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenBudouciAkce.IsSet() {
		localVarQueryParams.Add("jenBudouciAkce", parameterToString(localVarOptionals.JenBudouciAkce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrafickyRozvrh.IsSet() {
		localVarQueryParams.Add("grafickyRozvrh", parameterToString(localVarOptionals.GrafickyRozvrh.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhovaakceinfo&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhovaakceinfoOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "RoakIdno" (optional.Int64) - 
     * @param "Lang" (optional.String) - 
@return AkceType
*/

type RozvrhyApiGetGetrozvrhovaakceinfoOpts struct {
    StagUser optional.String
    RoakIdno optional.Int64
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhovaakceinfo(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhovaakceinfoOpts) (AkceType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue AkceType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhovaAkceInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RoakIdno.IsSet() {
		localVarQueryParams.Add("roakIdno", parameterToString(localVarOptionals.RoakIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v AkceType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
RozvrhyApiService rozvrhy operation
Operace &#x27;GetGetrozvrhoveakce&#x27; z kategorie &#x27;rozvrhy&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RozvrhyApiGetGetrozvrhoveakceOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "Pracoviste" (optional.String) - 
     * @param "ZkrPredm" (optional.String) - 
     * @param "ZkrBudovy" (optional.String) - 
     * @param "CisloMistnosti" (optional.String) - 
     * @param "UcitIdno" (optional.Int64) - 
     * @param "Den" (optional.String) - 
     * @param "RokVarianty" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "Typ" (optional.String) - 
     * @param "Owner" (optional.String) - 
     * @param "Platnost" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return RozvrhType
*/

type RozvrhyApiGetGetrozvrhoveakceOpts struct {
    StagUser optional.String
    Pracoviste optional.String
    ZkrPredm optional.String
    ZkrBudovy optional.String
    CisloMistnosti optional.String
    UcitIdno optional.Int64
    Den optional.String
    RokVarianty optional.String
    Semestr optional.String
    Typ optional.String
    Owner optional.String
    Platnost optional.String
    Lang optional.String
}

func (a *RozvrhyApiService) GetGetrozvrhoveakce(ctx context.Context, localVarOptionals *RozvrhyApiGetGetrozvrhoveakceOpts) (RozvrhType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RozvrhType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rozvrhy/getRozvrhoveAkce"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Pracoviste.IsSet() {
		localVarQueryParams.Add("pracoviste", parameterToString(localVarOptionals.Pracoviste.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ZkrPredm.IsSet() {
		localVarQueryParams.Add("zkrPredm", parameterToString(localVarOptionals.ZkrPredm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ZkrBudovy.IsSet() {
		localVarQueryParams.Add("zkrBudovy", parameterToString(localVarOptionals.ZkrBudovy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CisloMistnosti.IsSet() {
		localVarQueryParams.Add("cisloMistnosti", parameterToString(localVarOptionals.CisloMistnosti.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UcitIdno.IsSet() {
		localVarQueryParams.Add("ucitIdno", parameterToString(localVarOptionals.UcitIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Den.IsSet() {
		localVarQueryParams.Add("den", parameterToString(localVarOptionals.Den.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RokVarianty.IsSet() {
		localVarQueryParams.Add("rokVarianty", parameterToString(localVarOptionals.RokVarianty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Typ.IsSet() {
		localVarQueryParams.Add("typ", parameterToString(localVarOptionals.Typ.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Owner.IsSet() {
		localVarQueryParams.Add("owner", parameterToString(localVarOptionals.Owner.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Platnost.IsSet() {
		localVarQueryParams.Add("platnost", parameterToString(localVarOptionals.Platnost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RozvrhType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
