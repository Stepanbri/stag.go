
/*
 * IS/STAG Web Services API
 *
 * Automaticky generovaná OpenAPI specifikace z WADL souborů pro webové služby IS/STAG.
 *
 * API version: 2.0.0
 * Contact: podpora@service.zcu.cz
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PredmetyApiService service
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetinfoooborupredmetu&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetinfoooborupredmetuOpts - Optional Parameters:
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "OborIdno" (optional.Int64) - 
     * @param "Lang" (optional.String) - 
@return OborPredmetuType
*/

type PredmetyApiGetGetinfoooborupredmetuOpts struct {
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    OborIdno optional.Int64
    Lang optional.String
}

func (a *PredmetyApiService) GetGetinfoooborupredmetu(ctx context.Context, localVarOptionals *PredmetyApiGetGetinfoooborupredmetuOpts) (OborPredmetuType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue OborPredmetuType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getInfoOOboruPredmetu"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OborIdno.IsSet() {
		localVarQueryParams.Add("oborIdno", parameterToString(localVarOptionals.OborIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v OborPredmetuType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetliteraturapredmetu&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetliteraturapredmetuOpts - Optional Parameters:
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return LiteraturaListType
*/

type PredmetyApiGetGetliteraturapredmetuOpts struct {
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetliteraturapredmetu(ctx context.Context, localVarOptionals *PredmetyApiGetGetliteraturapredmetuOpts) (LiteraturaListType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue LiteraturaListType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getLiteraturaPredmetu"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v LiteraturaListType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetneakreditovanepredmety&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetneakreditovanepredmetyOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "StavAkreditace" (optional.String) - 
     * @param "Fakulta" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
@return PredmetyAkreditaceType
*/

type PredmetyApiGetGetneakreditovanepredmetyOpts struct {
    StagUser optional.String
    StavAkreditace optional.String
    Fakulta optional.String
    Katedra optional.String
    Rok optional.String
}

func (a *PredmetyApiService) GetGetneakreditovanepredmety(ctx context.Context, localVarOptionals *PredmetyApiGetGetneakreditovanepredmetyOpts) (PredmetyAkreditaceType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyAkreditaceType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getNeakreditovanePredmety"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StavAkreditace.IsSet() {
		localVarQueryParams.Add("stavAkreditace", parameterToString(localVarOptionals.StavAkreditace.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fakulta.IsSet() {
		localVarQueryParams.Add("fakulta", parameterToString(localVarOptionals.Fakulta.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyAkreditaceType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetneakreditovanepredmetyects&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetneakreditovanepredmetyectsOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "StavAkreditace" (optional.String) - 
     * @param "Fakulta" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
@return PredmetyAkreditaceEctsType
*/

type PredmetyApiGetGetneakreditovanepredmetyectsOpts struct {
    StagUser optional.String
    StavAkreditace optional.String
    Fakulta optional.String
    Katedra optional.String
    Rok optional.String
}

func (a *PredmetyApiService) GetGetneakreditovanepredmetyects(ctx context.Context, localVarOptionals *PredmetyApiGetGetneakreditovanepredmetyectsOpts) (PredmetyAkreditaceEctsType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyAkreditaceEctsType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getNeakreditovanePredmetyEcts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StavAkreditace.IsSet() {
		localVarQueryParams.Add("stavAkreditace", parameterToString(localVarOptionals.StavAkreditace.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fakulta.IsSet() {
		localVarQueryParams.Add("fakulta", parameterToString(localVarOptionals.Fakulta.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyAkreditaceEctsType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetneakreditovanepredmetyseznamzmen&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetneakreditovanepredmetyseznamzmenOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "StavAkreditace" (optional.String) - 
     * @param "Fakulta" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
@return PredmetyAkreditaceSeznamZmenType
*/

type PredmetyApiGetGetneakreditovanepredmetyseznamzmenOpts struct {
    StagUser optional.String
    StavAkreditace optional.String
    Fakulta optional.String
    Katedra optional.String
    Rok optional.String
}

func (a *PredmetyApiService) GetGetneakreditovanepredmetyseznamzmen(ctx context.Context, localVarOptionals *PredmetyApiGetGetneakreditovanepredmetyseznamzmenOpts) (PredmetyAkreditaceSeznamZmenType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyAkreditaceSeznamZmenType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getNeakreditovanePredmetySeznamZmen"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StavAkreditace.IsSet() {
		localVarQueryParams.Add("stavAkreditace", parameterToString(localVarOptionals.StavAkreditace.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fakulta.IsSet() {
		localVarQueryParams.Add("fakulta", parameterToString(localVarOptionals.Fakulta.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyAkreditaceSeznamZmenType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetoborypredmetu&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetoborypredmetuOpts - Optional Parameters:
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return OborPredmetuListType
*/

type PredmetyApiGetGetoborypredmetuOpts struct {
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetoborypredmetu(ctx context.Context, localVarOptionals *PredmetyApiGetGetoborypredmetuOpts) (OborPredmetuListType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue OborPredmetuListType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getOboryPredmetu"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v OborPredmetuListType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetectsinfo&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetectsinfoOpts - Optional Parameters:
     * @param "Fakulta" (optional.String) - 
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "GarantUcitIdno" (optional.Int64) - 
     * @param "OborIdno" (optional.Int64) - 
     * @param "ZobrazovatVECTS" (optional.String) - 
     * @param "Akreditace" (optional.String) - 
     * @param "EctsAkreditace" (optional.String) - 
@return PredmetEctsInfoListType
*/

type PredmetyApiGetGetpredmetectsinfoOpts struct {
    Fakulta optional.String
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    GarantUcitIdno optional.Int64
    OborIdno optional.Int64
    ZobrazovatVECTS optional.String
    Akreditace optional.String
    EctsAkreditace optional.String
}

func (a *PredmetyApiService) GetGetpredmetectsinfo(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetectsinfoOpts) (PredmetEctsInfoListType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetEctsInfoListType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetECTSInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Fakulta.IsSet() {
		localVarQueryParams.Add("fakulta", parameterToString(localVarOptionals.Fakulta.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GarantUcitIdno.IsSet() {
		localVarQueryParams.Add("garantUcitIdno", parameterToString(localVarOptionals.GarantUcitIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OborIdno.IsSet() {
		localVarQueryParams.Add("oborIdno", parameterToString(localVarOptionals.OborIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ZobrazovatVECTS.IsSet() {
		localVarQueryParams.Add("zobrazovatVECTS", parameterToString(localVarOptionals.ZobrazovatVECTS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Akreditace.IsSet() {
		localVarQueryParams.Add("akreditace", parameterToString(localVarOptionals.Akreditace.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EctsAkreditace.IsSet() {
		localVarQueryParams.Add("ectsAkreditace", parameterToString(localVarOptionals.EctsAkreditace.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetEctsInfoListType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetinfo&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetinfoOpts - Optional Parameters:
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return PredmetInfoType
*/

type PredmetyApiGetGetpredmetinfoOpts struct {
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetinfo(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetinfoOpts) (PredmetInfoType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetInfoType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetInfoType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetinfopdf&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetinfopdfOpts - Optional Parameters:
     * @param "Katedra" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Lang" (optional.String) - 

*/

type PredmetyApiGetGetpredmetinfopdfOpts struct {
    Katedra optional.String
    Zkratka optional.String
    Rok optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetinfopdf(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetinfopdfOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetInfoPDF"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybyblok&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybyblokOpts - Optional Parameters:
     * @param "BlokIdno" (optional.Int64) - 
     * @param "VyznamPredmetu" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return PredmetyBlokuType
*/

type PredmetyApiGetGetpredmetybyblokOpts struct {
    BlokIdno optional.Int64
    VyznamPredmetu optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybyblok(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybyblokOpts) (PredmetyBlokuType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyBlokuType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByBlok"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.BlokIdno.IsSet() {
		localVarQueryParams.Add("blokIdno", parameterToString(localVarOptionals.BlokIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VyznamPredmetu.IsSet() {
		localVarQueryParams.Add("vyznamPredmetu", parameterToString(localVarOptionals.VyznamPredmetu.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyBlokuType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybyblokfullinfo&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybyblokfullinfoOpts - Optional Parameters:
     * @param "BlokIdno" (optional.Int64) - 
     * @param "VyznamPredmetu" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return PredmetyBlokuFullInfoType
*/

type PredmetyApiGetGetpredmetybyblokfullinfoOpts struct {
    BlokIdno optional.Int64
    VyznamPredmetu optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybyblokfullinfo(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybyblokfullinfoOpts) (PredmetyBlokuFullInfoType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyBlokuFullInfoType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByBlokFullInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.BlokIdno.IsSet() {
		localVarQueryParams.Add("blokIdno", parameterToString(localVarOptionals.BlokIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VyznamPredmetu.IsSet() {
		localVarQueryParams.Add("vyznamPredmetu", parameterToString(localVarOptionals.VyznamPredmetu.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyBlokuFullInfoType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybyfakulta&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybyfakultaOpts - Optional Parameters:
     * @param "Fakulta" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "VyucovaciJazyk" (optional.String) - 
     * @param "JenNabizeneECTSPrijezdy" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return PredmetyKatedryType
*/

type PredmetyApiGetGetpredmetybyfakultaOpts struct {
    Fakulta optional.String
    Rok optional.String
    VyucovaciJazyk optional.String
    JenNabizeneECTSPrijezdy optional.Bool
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybyfakulta(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybyfakultaOpts) (PredmetyKatedryType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyKatedryType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByFakulta"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Fakulta.IsSet() {
		localVarQueryParams.Add("fakulta", parameterToString(localVarOptionals.Fakulta.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VyucovaciJazyk.IsSet() {
		localVarQueryParams.Add("vyucovaciJazyk", parameterToString(localVarOptionals.VyucovaciJazyk.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenNabizeneECTSPrijezdy.IsSet() {
		localVarQueryParams.Add("jenNabizeneECTSPrijezdy", parameterToString(localVarOptionals.JenNabizeneECTSPrijezdy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyKatedryType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybyfakultafullinfo&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybyfakultafullinfoOpts - Optional Parameters:
     * @param "Fakulta" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "VyucovaciJazyk" (optional.String) - 
     * @param "JenNabizeneECTSPrijezdy" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return PredmetInfoListType
*/

type PredmetyApiGetGetpredmetybyfakultafullinfoOpts struct {
    Fakulta optional.String
    Rok optional.String
    VyucovaciJazyk optional.String
    JenNabizeneECTSPrijezdy optional.Bool
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybyfakultafullinfo(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybyfakultafullinfoOpts) (PredmetInfoListType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetInfoListType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByFakultaFullInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Fakulta.IsSet() {
		localVarQueryParams.Add("fakulta", parameterToString(localVarOptionals.Fakulta.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VyucovaciJazyk.IsSet() {
		localVarQueryParams.Add("vyucovaciJazyk", parameterToString(localVarOptionals.VyucovaciJazyk.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenNabizeneECTSPrijezdy.IsSet() {
		localVarQueryParams.Add("jenNabizeneECTSPrijezdy", parameterToString(localVarOptionals.JenNabizeneECTSPrijezdy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetInfoListType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybykatedra&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybykatedraOpts - Optional Parameters:
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "JenNabizeneECTSPrijezdy" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return PredmetyKatedryType
*/

type PredmetyApiGetGetpredmetybykatedraOpts struct {
    Katedra optional.String
    Rok optional.String
    Semestr optional.String
    JenNabizeneECTSPrijezdy optional.Bool
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybykatedra(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybykatedraOpts) (PredmetyKatedryType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyKatedryType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByKatedra"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenNabizeneECTSPrijezdy.IsSet() {
		localVarQueryParams.Add("jenNabizeneECTSPrijezdy", parameterToString(localVarOptionals.JenNabizeneECTSPrijezdy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyKatedryType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybykatedrafullinfo&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybykatedrafullinfoOpts - Optional Parameters:
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "JenNabizeneECTSPrijezdy" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return PredmetyKatedryFullInfoType
*/

type PredmetyApiGetGetpredmetybykatedrafullinfoOpts struct {
    Katedra optional.String
    Rok optional.String
    Semestr optional.String
    JenNabizeneECTSPrijezdy optional.Bool
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybykatedrafullinfo(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybykatedrafullinfoOpts) (PredmetyKatedryFullInfoType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyKatedryFullInfoType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByKatedraFullInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenNabizeneECTSPrijezdy.IsSet() {
		localVarQueryParams.Add("jenNabizeneECTSPrijezdy", parameterToString(localVarOptionals.JenNabizeneECTSPrijezdy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyKatedryFullInfoType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybyobor&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybyoborOpts - Optional Parameters:
     * @param "OborIdno" (optional.Int64) - 
     * @param "CisloOboru" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "VyznamPredmetu" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return PredmetyOboruType
*/

type PredmetyApiGetGetpredmetybyoborOpts struct {
    OborIdno optional.Int64
    CisloOboru optional.String
    Rok optional.String
    VyznamPredmetu optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybyobor(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybyoborOpts) (PredmetyOboruType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyOboruType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByObor"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.OborIdno.IsSet() {
		localVarQueryParams.Add("oborIdno", parameterToString(localVarOptionals.OborIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CisloOboru.IsSet() {
		localVarQueryParams.Add("cisloOboru", parameterToString(localVarOptionals.CisloOboru.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VyznamPredmetu.IsSet() {
		localVarQueryParams.Add("vyznamPredmetu", parameterToString(localVarOptionals.VyznamPredmetu.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyOboruType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybyoborfullinfo&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybyoborfullinfoOpts - Optional Parameters:
     * @param "OborIdno" (optional.Int64) - 
     * @param "CisloOboru" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "VyznamPredmetu" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return PredmetyOboruFullInfoType
*/

type PredmetyApiGetGetpredmetybyoborfullinfoOpts struct {
    OborIdno optional.Int64
    CisloOboru optional.String
    Rok optional.String
    VyznamPredmetu optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybyoborfullinfo(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybyoborfullinfoOpts) (PredmetyOboruFullInfoType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyOboruFullInfoType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByOborFullInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.OborIdno.IsSet() {
		localVarQueryParams.Add("oborIdno", parameterToString(localVarOptionals.OborIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CisloOboru.IsSet() {
		localVarQueryParams.Add("cisloOboru", parameterToString(localVarOptionals.CisloOboru.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VyznamPredmetu.IsSet() {
		localVarQueryParams.Add("vyznamPredmetu", parameterToString(localVarOptionals.VyznamPredmetu.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyOboruFullInfoType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybystudent&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybystudentOpts - Optional Parameters:
     * @param "StagUser" (optional.String) - 
     * @param "OsCislo" (optional.String) - 
     * @param "Semestr" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "NevracetUznane" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return PredmetyStudentaType
*/

type PredmetyApiGetGetpredmetybystudentOpts struct {
    StagUser optional.String
    OsCislo optional.String
    Semestr optional.String
    Rok optional.String
    NevracetUznane optional.Bool
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybystudent(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybystudentOpts) (PredmetyStudentaType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyStudentaType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByStudent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StagUser.IsSet() {
		localVarQueryParams.Add("stagUser", parameterToString(localVarOptionals.StagUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OsCislo.IsSet() {
		localVarQueryParams.Add("osCislo", parameterToString(localVarOptionals.OsCislo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Semestr.IsSet() {
		localVarQueryParams.Add("semestr", parameterToString(localVarOptionals.Semestr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NevracetUznane.IsSet() {
		localVarQueryParams.Add("nevracetUznane", parameterToString(localVarOptionals.NevracetUznane.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyStudentaType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetybyucitel&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetybyucitelOpts - Optional Parameters:
     * @param "UcitIdno" (optional.Int64) - 
     * @param "Katedra" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "JenCoMajiVyuku" (optional.Bool) - 
     * @param "Lang" (optional.String) - 
@return PredmetyUciteleType
*/

type PredmetyApiGetGetpredmetybyucitelOpts struct {
    UcitIdno optional.Int64
    Katedra optional.String
    Rok optional.String
    JenCoMajiVyuku optional.Bool
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetybyucitel(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetybyucitelOpts) (PredmetyUciteleType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyUciteleType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyByUcitel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.UcitIdno.IsSet() {
		localVarQueryParams.Add("ucitIdno", parameterToString(localVarOptionals.UcitIdno.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Katedra.IsSet() {
		localVarQueryParams.Add("katedra", parameterToString(localVarOptionals.Katedra.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JenCoMajiVyuku.IsSet() {
		localVarQueryParams.Add("jenCoMajiVyuku", parameterToString(localVarOptionals.JenCoMajiVyuku.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyUciteleType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetGetpredmetypodlimit&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetGetpredmetypodlimitOpts - Optional Parameters:
     * @param "Pracoviste" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return PredmetPodLimitListType
*/

type PredmetyApiGetGetpredmetypodlimitOpts struct {
    Pracoviste optional.String
    Rok optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetGetpredmetypodlimit(ctx context.Context, localVarOptionals *PredmetyApiGetGetpredmetypodlimitOpts) (PredmetPodLimitListType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetPodLimitListType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/getPredmetyPodLimit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Pracoviste.IsSet() {
		localVarQueryParams.Add("pracoviste", parameterToString(localVarOptionals.Pracoviste.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetPodLimitListType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PredmetyApiService predmety operation
Operace &#x27;GetNajdipredmety&#x27; z kategorie &#x27;predmety&#x27;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PredmetyApiGetNajdipredmetyOpts - Optional Parameters:
     * @param "Nazev" (optional.String) - 
     * @param "Pracoviste" (optional.String) - 
     * @param "Zkratka" (optional.String) - 
     * @param "Rok" (optional.String) - 
     * @param "Lang" (optional.String) - 
@return PredmetyKatedryType
*/

type PredmetyApiGetNajdipredmetyOpts struct {
    Nazev optional.String
    Pracoviste optional.String
    Zkratka optional.String
    Rok optional.String
    Lang optional.String
}

func (a *PredmetyApiService) GetNajdipredmety(ctx context.Context, localVarOptionals *PredmetyApiGetNajdipredmetyOpts) (PredmetyKatedryType, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PredmetyKatedryType
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/predmety/najdiPredmety"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Nazev.IsSet() {
		localVarQueryParams.Add("nazev", parameterToString(localVarOptionals.Nazev.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Pracoviste.IsSet() {
		localVarQueryParams.Add("pracoviste", parameterToString(localVarOptionals.Pracoviste.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zkratka.IsSet() {
		localVarQueryParams.Add("zkratka", parameterToString(localVarOptionals.Zkratka.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rok.IsSet() {
		localVarQueryParams.Add("rok", parameterToString(localVarOptionals.Rok.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lang.IsSet() {
		localVarQueryParams.Add("lang", parameterToString(localVarOptionals.Lang.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/xml", "text/xml", "application/json", "text/yaml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PredmetyKatedryType
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
